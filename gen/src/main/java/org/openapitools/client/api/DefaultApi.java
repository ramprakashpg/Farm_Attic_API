/*
 * Farm Attic API
 * Backend API for Farm Attic application
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: Fred@gigagantic-server.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CartResponse;
import org.openapitools.client.model.CartUpdateRequest;
import org.openapitools.client.model.OrderResponse;
import org.openapitools.client.model.ProductDto;
import org.openapitools.client.model.ProductRequest;
import java.util.UUID;
import org.openapitools.client.model.UserCartResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addProductToCart
     * @param productRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProductToCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProductToCartCall(ProductRequest productRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productRequest;

        // create path and map variables
        String localVarPath = "/v1/cart/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProductToCartValidateBeforeCall(ProductRequest productRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productRequest' is set
        if (productRequest == null) {
            throw new ApiException("Missing the required parameter 'productRequest' when calling addProductToCart(Async)");
        }
        

        okhttp3.Call localVarCall = addProductToCartCall(productRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productRequest  (required)
     * @return ProductRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProductToCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ProductRequest addProductToCart(ProductRequest productRequest) throws ApiException {
        ApiResponse<ProductRequest> localVarResp = addProductToCartWithHttpInfo(productRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productRequest  (required)
     * @return ApiResponse&lt;ProductRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProductToCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductRequest> addProductToCartWithHttpInfo(ProductRequest productRequest) throws ApiException {
        okhttp3.Call localVarCall = addProductToCartValidateBeforeCall(productRequest, null);
        Type localVarReturnType = new TypeToken<ProductRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> addProductToCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProductToCartAsync(ProductRequest productRequest, final ApiCallback<ProductRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProductToCartValidateBeforeCall(productRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductFromCart
     * @param cartId  (required)
     * @param productId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProductFromCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductFromCartCall(UUID cartId, UUID productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cart/{cartId}/product/{productId}"
            .replaceAll("\\{" + "cartId" + "\\}", localVarApiClient.escapeString(cartId.toString()))
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductFromCartValidateBeforeCall(UUID cartId, UUID productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling deleteProductFromCart(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteProductFromCart(Async)");
        }
        

        okhttp3.Call localVarCall = deleteProductFromCartCall(cartId, productId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param cartId  (required)
     * @param productId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProductFromCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteProductFromCart(UUID cartId, UUID productId) throws ApiException {
        ApiResponse<Object> localVarResp = deleteProductFromCartWithHttpInfo(cartId, productId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param cartId  (required)
     * @param productId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProductFromCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteProductFromCartWithHttpInfo(UUID cartId, UUID productId) throws ApiException {
        okhttp3.Call localVarCall = deleteProductFromCartValidateBeforeCall(cartId, productId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param cartId  (required)
     * @param productId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteProductFromCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductFromCartAsync(UUID cartId, UUID productId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductFromCartValidateBeforeCall(cartId, productId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllProducts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllProducts 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllProductsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllProductsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllProductsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return List&lt;ProductDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllProducts 200 response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductDto> getAllProducts() throws ApiException {
        ApiResponse<List<ProductDto>> localVarResp = getAllProductsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;ProductDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllProducts 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductDto>> getAllProductsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllProductsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ProductDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAllProducts 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllProductsAsync(final ApiCallback<List<ProductDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllProductsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ProductDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrderDetails
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrderDetails 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderDetailsCall(UUID userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/order/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderDetailsValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getOrderDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderDetailsCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return List&lt;OrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrderDetails 200 response </td><td>  -  </td></tr>
     </table>
     */
    public List<OrderResponse> getOrderDetails(UUID userId) throws ApiException {
        ApiResponse<List<OrderResponse>> localVarResp = getOrderDetailsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return ApiResponse&lt;List&lt;OrderResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrderDetails 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrderResponse>> getOrderDetailsWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getOrderDetailsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<OrderResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getOrderDetails 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderDetailsAsync(UUID userId, final ApiCallback<List<OrderResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderDetailsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<OrderResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserCartDetails
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserCartDetails 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCartDetailsCall(UUID userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cart/user/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserCartDetailsValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserCartDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getUserCartDetailsCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return UserCartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserCartDetails 200 response </td><td>  -  </td></tr>
     </table>
     */
    public UserCartResponse getUserCartDetails(UUID userId) throws ApiException {
        ApiResponse<UserCartResponse> localVarResp = getUserCartDetailsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return ApiResponse&lt;UserCartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserCartDetails 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserCartResponse> getUserCartDetailsWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getUserCartDetailsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<UserCartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserCartDetails 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCartDetailsAsync(UUID userId, final ApiCallback<UserCartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserCartDetailsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<UserCartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserProducts
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserProducts 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserProductsCall(UUID userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/product/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserProductsValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserProducts(Async)");
        }
        

        okhttp3.Call localVarCall = getUserProductsCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return List&lt;ProductDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserProducts 200 response </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductDto> getUserProducts(UUID userId) throws ApiException {
        ApiResponse<List<ProductDto>> localVarResp = getUserProductsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId  (required)
     * @return ApiResponse&lt;List&lt;ProductDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserProducts 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductDto>> getUserProductsWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getUserProductsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<ProductDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserProducts 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserProductsAsync(UUID userId, final ApiCallback<List<ProductDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserProductsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<ProductDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for login
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = loginCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login 200 response </td><td>  -  </td></tr>
     </table>
     */
    public void login() throws ApiException {
        loginWithHttpInfo();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> loginWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = loginValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> login 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeOrder
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placeOrder 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeOrderCall(UUID body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/order/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeOrderValidateBeforeCall(UUID body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling placeOrder(Async)");
        }
        

        okhttp3.Call localVarCall = placeOrderCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return OrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placeOrder 200 response </td><td>  -  </td></tr>
     </table>
     */
    public OrderResponse placeOrder(UUID body) throws ApiException {
        ApiResponse<OrderResponse> localVarResp = placeOrderWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;OrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placeOrder 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderResponse> placeOrderWithHttpInfo(UUID body) throws ApiException {
        okhttp3.Call localVarCall = placeOrderValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> placeOrder 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call placeOrderAsync(UUID body, final ApiCallback<OrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeOrderValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveProduct
     * @param productDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> saveProduct 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveProductCall(ProductDto productDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productDto;

        // create path and map variables
        String localVarPath = "/v1/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveProductValidateBeforeCall(ProductDto productDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productDto' is set
        if (productDto == null) {
            throw new ApiException("Missing the required parameter 'productDto' when calling saveProduct(Async)");
        }
        

        okhttp3.Call localVarCall = saveProductCall(productDto, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productDto  (required)
     * @return ProductDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> saveProduct 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ProductDto saveProduct(ProductDto productDto) throws ApiException {
        ApiResponse<ProductDto> localVarResp = saveProductWithHttpInfo(productDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productDto  (required)
     * @return ApiResponse&lt;ProductDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> saveProduct 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDto> saveProductWithHttpInfo(ProductDto productDto) throws ApiException {
        okhttp3.Call localVarCall = saveProductValidateBeforeCall(productDto, null);
        Type localVarReturnType = new TypeToken<ProductDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> saveProduct 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveProductAsync(ProductDto productDto, final ApiCallback<ProductDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveProductValidateBeforeCall(productDto, _callback);
        Type localVarReturnType = new TypeToken<ProductDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCart
     * @param cartId  (required)
     * @param productId  (required)
     * @param cartUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCartCall(UUID cartId, UUID productId, CartUpdateRequest cartUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cartUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/cart/{cartId}/product/{productId}"
            .replaceAll("\\{" + "cartId" + "\\}", localVarApiClient.escapeString(cartId.toString()))
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCartValidateBeforeCall(UUID cartId, UUID productId, CartUpdateRequest cartUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling updateCart(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updateCart(Async)");
        }
        
        // verify the required parameter 'cartUpdateRequest' is set
        if (cartUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'cartUpdateRequest' when calling updateCart(Async)");
        }
        

        okhttp3.Call localVarCall = updateCartCall(cartId, productId, cartUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param cartId  (required)
     * @param productId  (required)
     * @param cartUpdateRequest  (required)
     * @return CartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public CartResponse updateCart(UUID cartId, UUID productId, CartUpdateRequest cartUpdateRequest) throws ApiException {
        ApiResponse<CartResponse> localVarResp = updateCartWithHttpInfo(cartId, productId, cartUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param cartId  (required)
     * @param productId  (required)
     * @param cartUpdateRequest  (required)
     * @return ApiResponse&lt;CartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartResponse> updateCartWithHttpInfo(UUID cartId, UUID productId, CartUpdateRequest cartUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCartValidateBeforeCall(cartId, productId, cartUpdateRequest, null);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param cartId  (required)
     * @param productId  (required)
     * @param cartUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateCart 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCartAsync(UUID cartId, UUID productId, CartUpdateRequest cartUpdateRequest, final ApiCallback<CartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCartValidateBeforeCall(cartId, productId, cartUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProduct
     * @param productId  (required)
     * @param productDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProduct 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductCall(UUID productId, ProductDto productDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = productDto;

        // create path and map variables
        String localVarPath = "/v1/product/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductValidateBeforeCall(UUID productId, ProductDto productDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updateProduct(Async)");
        }
        
        // verify the required parameter 'productDto' is set
        if (productDto == null) {
            throw new ApiException("Missing the required parameter 'productDto' when calling updateProduct(Async)");
        }
        

        okhttp3.Call localVarCall = updateProductCall(productId, productDto, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param productId  (required)
     * @param productDto  (required)
     * @return ProductDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProduct 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ProductDto updateProduct(UUID productId, ProductDto productDto) throws ApiException {
        ApiResponse<ProductDto> localVarResp = updateProductWithHttpInfo(productId, productDto);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productId  (required)
     * @param productDto  (required)
     * @return ApiResponse&lt;ProductDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProduct 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDto> updateProductWithHttpInfo(UUID productId, ProductDto productDto) throws ApiException {
        okhttp3.Call localVarCall = updateProductValidateBeforeCall(productId, productDto, null);
        Type localVarReturnType = new TypeToken<ProductDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productId  (required)
     * @param productDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateProduct 200 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductAsync(UUID productId, ProductDto productDto, final ApiCallback<ProductDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductValidateBeforeCall(productId, productDto, _callback);
        Type localVarReturnType = new TypeToken<ProductDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
