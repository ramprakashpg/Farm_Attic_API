plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.7.9"
    id 'jacoco'
}

apply plugin: 'jacoco'

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("jakarta.annotation:jakarta.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic")

    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    runtimeOnly("com.h2database:h2")
    runtimeOnly("org.postgresql:postgresql")
    implementation("io.micronaut.flyway:micronaut-flyway")


    implementation 'org.modelmapper:modelmapper:3.1.1'

    testImplementation("io.reactivex:rxjava:1.3.8")
    testImplementation("io.reactivex.rxjava3:rxjava:3.1.5")

    compileOnly "io.micronaut:micronaut-aop"
    testImplementation 'org.mockito:mockito-core:4.2.0'
    compileOnly "org.projectlombok:lombok:1.18.24"
    compileOnly "com.google.code.findbugs:jsr305"
    annotationProcessor "org.projectlombok:lombok:1.18.24"
}

application {
    mainClass.set("com.farmAttic.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.farmAttic.*")
    }
}
test {
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/farmAttic/Application.class', 'com/farmAttic/models'])
        }))
    }
}

check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/farmAttic/Application.class', 'com/farmAttic/models','com/farmAttic/Dtos'])
        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 0.95
            }
        }
    }
}



