plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.1.2"
    id("io.micronaut.aot") version "4.1.2"
    id 'jacoco'
}

apply plugin: 'jacoco'

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.micronaut:micronaut-http-server-netty:4.4.8'
    implementation('io.micronaut:micronaut-http-client:4.4.8')
    implementation('io.micronaut:micronaut-jackson-databind:4.4.9')
    implementation('io.micronaut.security:micronaut-security-oauth2:4.6.9')
    implementation('io.micronaut.security:micronaut-security-jwt')
    implementation('jakarta.annotation:jakarta.annotation-api:3.0.0')
    implementation 'io.reactivex.rxjava3:rxjava:3.1.6'
    annotationProcessor "io.micronaut.openapi:micronaut-openapi:4.8.5"
    implementation('io.micronaut.session:micronaut-session:4.3.0')
    compileOnly "io.micronaut.redis:micronaut-redis-lettuce"
    runtimeOnly("org.yaml:snakeyaml")

    implementation 'org.slf4j:slf4j-api:2.0.13'

    implementation('io.swagger.core.v3:swagger-annotations:2.0.9')

    runtimeOnly('ch.qos.logback:logback-classic:1.5.6')

    annotationProcessor('io.micronaut.data:micronaut-data-processor:4.7.0')
    implementation('io.micronaut.data:micronaut-data-hibernate-jpa:4.7.0')
    implementation('io.micronaut.sql:micronaut-jdbc-hikari:5.6.0')
    runtimeOnly('com.h2database:h2:2.2.224')
    runtimeOnly('org.postgresql:postgresql')
    implementation('io.micronaut.flyway:micronaut-flyway')


    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'

    testImplementation('io.reactivex:rxjava:1.3.0')

    compileOnly "io.micronaut:micronaut-aop"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.0-M1'
    testImplementation 'org.mockito:mockito-core:4.2.0'
    compileOnly "org.projectlombok:lombok:1.18.24"
    compileOnly "com.google.code.findbugs:jsr305:1.3.9"
    annotationProcessor "org.projectlombok:lombok:1.18.24"
    implementation 'io.micronaut.test:micronaut-test-junit5:4.3.0'
}

application {
    mainClass = "com.farmAttic.Application"
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.farmAttic.*")
    }
    aot {
        // Please review carefully the optimizations enabled below
        // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
    }
}
test {
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/farmAttic/Application.class', 'com/farmAttic/models'])
        }))
    }
}


check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/farmAttic/Application.class', 'com/farmAttic/models', 'com/farmAttic/Dtos'])
        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 0.95
            }
        }
    }
}



